#!/bin/bash
#
# Doit - fire-and-forget script mailer
#
# Copyright 2020-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for running a job in a disowned subprocess so the
# user can logout, then emailing status and output to the user when the job
# completes.


# assume we're in the source tree if $PWD/doit.sh.in exists
if [ -f $(dirname $0)/doit.sh.in ]; then
    LIBDIR=$(realpath $(dirname $0))
    CONFDIR=$LIBDIR
else
    LIBDIR=__LIBDIR__
    CONFDIR=__CONFDIR__
fi
. $LIBDIR/doit.sh
[ -f $CONFDIR/doit.conf ] && . $CONFDIR/doit.conf
[ -f ~/.doit.conf ] && . ~/.doit.conf


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "Doit - fire-and-forget script mailer."
    echo "Copyright (C) 2020-2022 Michael D Labriola <veggiemike@sourceruckus.org>"
    echo
    echo "Doit executes a command in the background and mails its output and exit status"
    echo "to a specified account.  It can also log to a file locally instead of mailing,"
    echo "if that's what floats your boat."
    echo
    echo "usage: `basename $0` OPTIONS CMD..."
    echo
    echo "  -h, --help                Show this help message and exit."
    echo
    echo "  -V, --version             Show version string and exit."
    echo
    echo "  -f, --filename LOGFILE    Specify output filename.  Both stdout and stderr"
    echo "                            will be redirected to this file.  When the process"
    echo "                            finishes, the files last few lines will contain"
    echo "                            \"DOIT: ALL DONE\", a return code, and timing stats."
    echo
    echo "  -m, --mail EMAILADDRESS   Email stdout/stderr to specified address instead"
    echo "                            of logging to a file."
    echo
    echo "  -a, --attachment          Send output as an attachment instead of as the email"
    echo "                            body.  The exit status and timing info will remain"
    echo "                            in email body."
    echo
    echo "NOTE: If CMD contains any arguments (e.g., -f, --verbose), you'll need to"
    echo "      separate it from the rest of the doit commandline via -- (the special"
    echo "      getopt stop parsing flag)."
    echo
    echo "NOTE: If CMD is a compound statement, you'll need to quote and escape things"
    echo "      appropriately."
    echo
    echo "example: doit --mail me@myemail.com --attachment -- kernel-builder --stable"
    echo
    echo "example: doit -f ~/build.log -- \\"
    echo "           \"find /boot -type f -exec echo {} \; -exec sleep .1 \; && echo woot\""
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $0 \
    -o hf:m:Va \
    --long help,filename:,mail:,version,attachment -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts


mail=$DEFAULT_MAIL
attach=
# parse the new positional arguments
while true; do
    case "$1" in
        -f|--filename)
            filename=$2
            mail=
            shift 2
            ;;
	-m|--mail)
            mail=$2
            filename=
            shift 2
            ;;
        -a|--attachment)
            attach=yes
            shift
            ;;
        -V|--version)
            echo "Doit $VERSION"
            exit 0
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done
cmd=$*

# check for required options
if [ -z "$filename" -a -z "$mail" ]; then
    usage "--filename or --mail required"
    exit 1
fi
if [ -n "$filename" -a -n "$mail" ]; then
    usage "cannot do both --filename and --mail"
    exit 1
fi
if [ -n "$filename" -a -n "$attach" ]; then
    usage "--attachment only allowed with --mail"
    exit 1
fi
if [ -z "$cmd" ]; then
    usage "CMD required"
    exit 1
fi

echo filename: $filename
echo mail: $mail
echo attach: $attach
echo cmd: $cmd

if [ -n "$filename" ]; then
    go="{ time ($cmd ; echo -e \"\n\nDOIT: ALL DONE\nCMD: $cmd\nPWD: $PWD\nRET: \$?\") } >$filename 2>&1 &"
    echo $go
    eval $go

else
    # email mode - for this we write command output to a tmp file so that we
    # can print the summary at the TOP of the email (because scrolling in email
    # is annoying) or perhaps send the output log as an attachment.
    #
    # NOTE: This is an order of magnitude more complicated than the original
    #       redirect-stdout-to-mail approach, but it'll be worth it.
    #
    #       We have to create a subproc containing all the extra parsing and
    #       emailing logic, then execute that disowned in the background and
    #       exit.
    #
    tmpdir=$(mktemp -dt $(basename $0)-XXXX)
    echo tmpdir: $tmpdir
    # part 1 - variable expansion
    cat > $tmpdir/doit.sh <<EOF
#!/bin/bash
cmd="$cmd"
tmpdir="$tmpdir"
mail="$mail"
attach="$attach"

EOF
    # part 2 - no variable expansion
    cat >> $tmpdir/doit.sh <<'EOF'
go="time (($cmd) >$tmpdir/cmd.log 2>&1; echo \$? >$tmpdir/exit.status) >$tmpdir/time.log 2>&1"
#echo $go
eval $go

ret=$(cat $tmpdir/exit.status)

# prep body of email
cat > $tmpdir/mail.body <<EOF2
DOIT: ALL DONE
CMD: $cmd
PWD: $PWD
RET: $ret
$(cat $tmpdir/time.log)
EOF2

if [ -n "$attach" ]; then
    # mail it
    cat $tmpdir/mail.body | mail -s "doit $cmd [$PWD]: all done" --content-type=text/plain --attach=$tmpdir/cmd.log $mail    
else
    # append command output
    cat >> $tmpdir/mail.body <<EOF2

---- CMD OUTPUT ---------------------------------------------------------------
$(cat $tmpdir/cmd.log)
EOF2
    # mail it
    cat $tmpdir/mail.body | mail -s "doit $cmd [$PWD]: all done" $mail
fi

# cleanup
#
# NOTE: Seems scary rm -rf'ing a variable that could be messed up... so we do
#       this the careful way.
#
rm $tmpdir/{cmd.log,exit.status,time.log,mail.body,doit.sh}
rmdir $tmpdir
EOF

    chmod +x $tmpdir/doit.sh
    $tmpdir/doit.sh &
fi

exit 0
